(window.webpackJsonpShineoutDoc=window.webpackJsonpShineoutDoc||[]).push([[9],{1396:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),o=a(499),d=a(500),l=a(39),c=a(1397),i=a.n(c),s=a(1398),m=a.n(s),u=Object(l.b)(i.a,m.a),C=[{name:"1-base",title:Object(l.b)("基本用法 \n Card 内部由 Header, Body, Footer 三个自组件组成，可以组合或单独使用","Base \n The card is composed of three components: Header, Body, and Footer. It can be combined or used separately."),component:a(1399).default,rawText:a(1400)},{name:"2-boxshadow",title:Object(l.b)("阴影 \n 可以通过 shadow 属性控制阴影","BoxShadow \n Set the shadow property to determined how to display the shadow."),component:a(1401).default,rawText:a(1402)},{name:"3-form",title:Object(l.b)("表单 \n Card.Submit 可以用来触发 Card 内部表单提交","Form \n Use Card.submit to trigger the submimt event of the form in the card."),component:a(1403).default,rawText:a(1404)},{name:"4-collapse",title:Object(l.b)("折叠 \n 设置 collapsible 可以折叠 Card，通过 collapsed 或 defaultCollapsed 属性控制状态","Collapse \n Set collapsible can collapse the Card panel."),component:a(1405).default,rawText:a(1406)},{name:"5-accordion",title:Object(l.b)("手风琴 \n 使用 Card.Accordion 可以使一组 Card 实现手风琴效果（每次打开一个 Card）","Accordion \n Put a group of Card in the Card.Accordion, only one panel can be expanded at the same time."),component:a(1407).default,rawText:a(1408)}];n.default=Object(o.a)(function(e){return r.a.createElement(d.b,Object.assign({},e,{codes:void 0,source:u,examples:C}))})},1397:function(e,n){e.exports="# Card *卡片*\n\n<example />\n\n## API\n\n### Card\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| className | string | 无 | 扩展className |\n| collapsible | boolean \\| 'bottom' | false | 是否可折叠，'bottom' 表示从下方点击折叠 |\n| collapsed | boolean | 无 | 是否折叠，用于受控状态 |\n| defaultCollapsed | boolean | true | 初始折叠状态（仅在 collapsible 为 true 时有效） |\n| onCollapse | () => void | 无 | 折叠状态改变时回调事件 |\n| shadow | true \\| false \\| 'hover' | false | 是否显示阴影<br />'hover' - 鼠标移到元素上显示<br />true - 总是显示<br />false - 从不显示 |\n| style | object | 无 | 最外层扩展样式 |\n| id | any | 无 | 手风琴下控制展开的值 |\n\n<br />\n\n### Card.Header, Card.Body, Card.Footer\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| className | string | 无 | 扩展className |\n| style | object | 无 | 最外层扩展样式 |\n\n<br />\n\n### Card.Accordion\n\n| 属性 | 类型 | 默认值 | 说明 |\n| --- | --- | --- | --- |\n| active | any | 无 | 打开的值，全关闭时为 null，用于受控状态。默认为索引，若Card设置id后则为id。 |\n| defaultActive | any | 0 | 默认打开的值，用于非受控状态。默认为索引，若Card设置id后则为id。 |\n| onChange | () => void | 无 | 面板打开回调 |\n\n<br />\n\n### Card.Submit\n\n同 [Button](/components/Button)\n"},1398:function(e,n){e.exports="# Card\n\n<example />\n\n## API\n\n### Card\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| className | string | none | Extend className |\n| collapsible | boolean \\| 'bottom' | false | Whether can be collapsed，'bottom' can collaps on bottom |\n| collapsed | boolean | - | Whether to be collapsed. |\n| defaultCollapsed | boolean | true | Initial collapsed state |\n| onCollapse | () => void | - | Callback when collapsed state changed |\n| shadow | true \\| false \\| 'hover' | false | Whether to show the shadow.<br />'hover' - Display it when the mouse is over the element.<br />true - Always show<br />false - Never show |\n| style | object | - | Container element style |\n| id | any | none | Card.Accordion expand controlled key |\n\n### Card.Header, Card.Body, Card.Footer\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| className | string | - | Extend className |\n| style | object | - | Element style |\n\n### Card.Accordion\n\n| Property | Type | Default | Description |\n| --- | --- | --- | --- |\n| active | any | none | Active value. It is -1 when fully closed. Used in controlled state. be id while Card.id setted |\n| defaultActive | any | 0 | The default active value for uncontrolled state, be id while Card.id setted|\n| onChange | () => void | none | The callback function when the panel is opened |\n\n### Card.Submit\n\nThe same as [Button](/components/Button)\n"},1399:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),o=a(66),d={width:240,height:300,display:"inline-flex",marginRight:20},l={background:"#f7f7f7"};n.default=function(){return r.a.createElement("div",null,r.a.createElement(o.a,{style:d},r.a.createElement(o.a.Header,null,"Header"),r.a.createElement(o.a.Body,null,"Body"),r.a.createElement(o.a.Footer,null,"Footer")),r.a.createElement(o.a,{style:d},r.a.createElement(o.a.Header,{style:l},"Header"),r.a.createElement(o.a.Body,null,"Body"),r.a.createElement(o.a.Footer,{style:l},"Footer")))}},1400:function(e,n){e.exports="/**\n * cn - 基本用法\n *    -- Card 内部由 Header, Body, Footer 三个自组件组成，可以组合或单独使用\n * en - Base\n *    -- The card is composed of three components: Header, Body, and Footer. It can be combined or used separately.\n */\nimport React from 'react'\nimport { Card } from 'shineout'\n\nconst cardStyle = {\n  width: 240,\n  height: 300,\n  display: 'inline-flex',\n  marginRight: 20,\n}\nconst gray = { background: '#f7f7f7' }\n\nexport default function() {\n  return (\n    <div>\n      <Card style={cardStyle}>\n        <Card.Header>Header</Card.Header>\n        <Card.Body>Body</Card.Body>\n        <Card.Footer>Footer</Card.Footer>\n      </Card>\n\n      <Card style={cardStyle}>\n        <Card.Header style={gray}>Header</Card.Header>\n        <Card.Body>Body</Card.Body>\n        <Card.Footer style={gray}>Footer</Card.Footer>\n      </Card>\n    </div>\n  )\n}\n"},1401:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),o=a(66),d={width:140,display:"inline-flex",marginRight:20};n.default=function(){return r.a.createElement("div",null,r.a.createElement(o.a,{style:d},r.a.createElement(o.a.Body,null,"Never")),r.a.createElement(o.a,{style:d,shadow:"hover"},r.a.createElement(o.a.Body,null,"Hover")),r.a.createElement(o.a,{style:d,shadow:!0},r.a.createElement(o.a.Body,null,"Always")))}},1402:function(e,n){e.exports="/**\n * cn - 阴影\n *    -- 可以通过 shadow 属性控制阴影\n * en - BoxShadow\n *    -- Set the shadow property to determined how to display the shadow.\n */\nimport React from 'react'\nimport { Card } from 'shineout'\n\nconst cardStyle = {\n  width: 140,\n  display: 'inline-flex',\n  marginRight: 20,\n}\n\nexport default function() {\n  return (\n    <div>\n      <Card style={cardStyle}>\n        <Card.Body>Never</Card.Body>\n      </Card>\n\n      <Card style={cardStyle} shadow=\"hover\">\n        <Card.Body>Hover</Card.Body>\n      </Card>\n\n      <Card style={cardStyle} shadow>\n        <Card.Body>Always</Card.Body>\n      </Card>\n    </div>\n  )\n}\n"},1403:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),o=a(66),d=a(496),l=a(88);n.default=function(){return r.a.createElement(o.a,{style:{width:500}},r.a.createElement(o.a.Header,null,"Header"),r.a.createElement(o.a.Body,null,r.a.createElement("br",null),r.a.createElement(d.a,{onSubmit:function(e){console.log(e)}},r.a.createElement(d.a.Item,{label:"User name"},r.a.createElement(l.a,{name:"name",defaultValue:"user"})),r.a.createElement(d.a.Item,{label:"Email"},r.a.createElement(l.a,{name:"email",defaultValue:"test@example.com"})))),r.a.createElement(o.a.Footer,{align:"right"},r.a.createElement(o.a.Submit,null,"Submit")))}},1404:function(e,n){e.exports='/**\n * cn - 表单\n *    -- Card.Submit 可以用来触发 Card 内部表单提交\n * en - Form\n *    -- Use Card.submit to trigger the submimt event of the form in the card.\n */\nimport React from \'react\'\nimport { Card, Form, Input } from \'shineout\'\n\nexport default function() {\n  return (\n    <Card style={{ width: 500 }}>\n      <Card.Header>Header</Card.Header>\n\n      <Card.Body>\n        <br />\n        <Form\n          onSubmit={data => {\n            console.log(data)\n          }}\n        >\n          <Form.Item label="User name">\n            <Input name="name" defaultValue="user" />\n          </Form.Item>\n\n          <Form.Item label="Email">\n            <Input name="email" defaultValue="test@example.com" />\n          </Form.Item>\n        </Form>\n      </Card.Body>\n\n      <Card.Footer align="right">\n        <Card.Submit>Submit</Card.Submit>\n      </Card.Footer>\n    </Card>\n  )\n}\n'},1405:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),o=a(66),d=a(1505);n.default=function(){return r.a.createElement(o.a,{collapsible:!0},r.a.createElement(o.a.Header,null,"Header"),r.a.createElement(o.a.Body,null,r.a.createElement("div",{style:{height:100}},r.a.createElement(d.a,null))))}},1406:function(e,n){e.exports="/**\n * cn - 折叠\n *    -- 设置 collapsible 可以折叠 Card，通过 collapsed 或 defaultCollapsed 属性控制状态\n * en - Collapse\n *    -- Set collapsible can collapse the Card panel.\n */\nimport React from 'react'\nimport { Card, DatePicker } from 'shineout'\n\nexport default function() {\n  return (\n    <Card collapsible>\n      <Card.Header>Header</Card.Header>\n\n      <Card.Body>\n        <div style={{ height: 100 }}>\n          <DatePicker />\n        </div>\n      </Card.Body>\n    </Card>\n  )\n}\n"},1407:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),o=a(66);n.default=function(){return r.a.createElement(o.a.Accordion,{defaultActive:1},r.a.createElement(o.a,null,r.a.createElement(o.a.Header,null,"Header 1"),r.a.createElement(o.a.Body,null,"Body")),r.a.createElement(o.a,null,r.a.createElement(o.a.Header,null,"Header 2"),r.a.createElement(o.a.Body,null,"Body")),r.a.createElement(o.a,null,r.a.createElement(o.a.Header,null,"Header 3"),r.a.createElement(o.a.Body,null,"Body")))}},1408:function(e,n){e.exports="/**\n * cn - 手风琴\n *    -- 使用 Card.Accordion 可以使一组 Card 实现手风琴效果（每次打开一个 Card）\n * en - Accordion\n *    -- Put a group of Card in the Card.Accordion, only one panel can be expanded at the same time.\n */\nimport React from 'react'\nimport { Card } from 'shineout'\n\nexport default function() {\n  return (\n    <Card.Accordion defaultActive={1}>\n      <Card>\n        <Card.Header>Header 1</Card.Header>\n        <Card.Body>Body</Card.Body>\n      </Card>\n      <Card>\n        <Card.Header>Header 2</Card.Header>\n        <Card.Body>Body</Card.Body>\n      </Card>\n      <Card>\n        <Card.Header>Header 3</Card.Header>\n        <Card.Body>Body</Card.Body>\n      </Card>\n    </Card.Accordion>\n  )\n}\n"}}]);